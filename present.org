#+title: backup integration
* Backup integration
** requirements
      - save current state of file data, keep generations
      - ability to restore files, different versions (slow is ok)
      - run unattended in sane intervals, be non intrusive
      - make efficient use of storage
      - store -> use encryption
      - be accessible from other systems -> use common formats
** solution
*** backup  -  something potentially useful
     - backup generations, common formats, encryption, space efficient
       - duplicity http://duplicity.nongnu.org/ (active development)
         - configured to ...
           - full backups every month
           - incrementals in between
           - target mounted fs (could be s3, ftp ...)
           - encryption with gpg
         - fileformat is encrypted tar
         - librsync (rdiff + rdiffdir) to produce signatures and deltas on files and folders
       - additional bash script
         - read config
         - wrap calls to duplicity
*** non intrusive  -  else I won't use it
**** polybar

      *nice desktop integration (and yes, emacs has a desktop too)*

      - polybar appearance
        [[file:backup.polybar.ok.png]]
        [[file:polybar.complete.png]]
      - polybar configuration
        #+begin_src bash
          [module/backup]
          type = custom/script
          exec = ~/.config/polybar/backup-status.sh
          interval = 120
          format-prefix="âœ‡ "
          format-font = 5
          click-left = $EDITOR --eval '(gb/backup-log-open)'
          click-right = $EDITOR --eval '(gb/backup-collection-status)'
        #+end_src
**** systemd service - nixos

      *nixos - well even emacs needs /some/ libraries to function*

      - configuration
          #+begin_src nix
            systemd.user.services.backup-drive = {
              path = with pkgs; [ gzip gnutar bash duplicity gnupg cpulimit utillinux coreutils dateutils ];
              unitConfig = {
                ConditionPathExists="/run/media/user/684110cc-325f-4307-bce0-843930ff7de6";
              };
              serviceConfig = {
                ExecStart = "${pkgs.bash}/bin/bash -c '/home/user/bin/duplicity-backup.sh backup -v -y'";
              };
            };
            systemd.user.timers.backup-drive = {
              wantedBy = [ "run-media-pe-684110cc\\x2d325f\\x2d4307\\x2dbce0\\x2d843930ff7de6.mount" ];
              bindsTo = [ "run-media-pe-684110cc\\x2d325f\\x2d4307\\x2dbce0\\x2d843930ff7de6.mount" ];
              timerConfig = {
                OnActiveSec = 300; # after 5 minutes the drive was plugged in
                OnCalendar = "*-*-* 10..22/3:00:00";
              };
            };
          #+end_src
**** systemd service - unit files
      - regular systemd files (service)
          #+begin_src bash
          [Unit]
            ConditionPathExists=/run/media/user/684110cc-325f-4307-bce0-843930ff7de6
          [Service]
            Environment="LOCALE_ARCHIVE=/nix/store/nl67flma20ixa0x5jms4wk0yfbx..."
            Environment="PATH=/nix/store/afyqk8219zfv5and3pqahzvn6bpmx3dq-gzip..."
            Environment="TZDIR=/nix/store/yfd0qkf8m908j523xyvwmwrll95ywkdi-tzd..."
            ExecStart=/nix/.../bin/bash -c '/home/user/bin/duplicity-backup.sh backup -v -y'
          #+end_src
          #+begin_src bash
          [Unit]
            BindsTo=run-media-pe-684110cc\x2d325f\x2d4307\x2dbce0\x2d843930ff7de6.mount
          [Timer]
            OnActiveSec=300
            OnCalendar=*-*-* 10..22/3:00:00
          #+end_src
**** reduce system load

      *did you hear your cpu fan recently?*

      - cpulimit (limit load during encryption)
      - ionice (limit load on fs)
      - nice (limit process load)
*** drop outdated  -  even terrabytes are filled someday
**** fibonacci

      *dropping outdated, of course use fibonacci numbers*

      The Fibonacci numbers are the sequence of numbers
        $\{F_n\}_{n=1}^\infty$
      defined by the linear recurrence equation
        $$F_n = F_{n-1} + F_{n-2}$$
      with $F_1 = F_2 = 1$, and conventionally defining $F_0 = 0$.

      0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 ...

      Fibonacci numbers are named after Italian mathematician Leonardo of Pisa,
      later known as Fibonacci.

      In his 1202 book /Liber Abaci/, Fibonacci introduced the sequence to Western European mathematics,
      although the sequence had been described earlier in Indian mathematics, as early as 200 BC
      in work by Pingala on enumerating possible patterns of Sanskrit poetry
      formed from syllables of two lengths.
**** keep which?

      *which generations to keep?*

      - rules when to keep backup:
        - is one of the four youngest ones
        - is the oldest
        - month age / generation is a fib number or becomes a fib number
          - e.g. (A0 B1 C3 D5 [E6] F8 [G10] H11) ;; E and G would be dropped, but ...
          - adding generations without additional backups ...
          - (A0 B1 C3 D5 [E6] F8  [G10] H11)
            (A1 B2 C4 D6 [E7] F9  [G11] H12)
            (A2 B3 C5 D7 [E8] F10 [G12] H13) ;; H now @ fib# 13
            *BUT WANTED IS*
            (A2 B3 C5 D6 E8 [F10] [G12] H13) ;; drop F and G
          - (A10 B11 C13 D14 E16 [F18] [G20] H21) ;; F and G are still dropped @ fib# 21
**** racket

      *yeah, could have used some other language but that wouldn't have been any fun!*

***** lisp

      *everybody needs his dose of parenthesis, even you*

      - processing lists (well, it's a lisp)
         ([[file:duplicity-get-fulls-to-delete.rkt::173][link]])
         #+begin_src racket
           ;; pair path with age (or generation)
           (define (pair-with-age paths [reference-date (gg:now)])
             (map (lambda (path) (list (backup-age-in-months path reference-date) path))
                  paths))
         #+end_src

      *you all know that - I just like repeating myself*

      - little reminder
        - an opening parenthesis is a function call (in rare cases a macro call)
        - first symbol after opening parenthesis is a function (in rare cases a macro)
        - all following symbols are parameters to that function
        - in racket (), [] and {} are semantically equivalent
        - racket is not lazy, it is strict
        - it's a scheme thus a lisp-1 (one namespace for functions and variables)
***** typed

      *static vs. dynamic, want to start a flame war?*

      - source ([[file:duplicity-get-fulls-to-delete.rkt::173][link]])
         #+begin_src racket
           (define-type AgePathPair (List Nonnegative-Integer Path))

           ;; typing through annotation
           (: pair-with-age (((Listof Path)) (Date) . ->* . (Listof AgePathPair)))
           ;; pair path with age (or generation)
           (define (pair-with-age paths [reference-date (gg:now)])
             (map (lambda ([path : Path]) (list (backup-age-in-months path reference-date) path))
                  paths))

           ;; inlined typing
           (define (pair-with-age [paths : (Listof Path)] [reference-date : Date (gg:now)]) : (Listof AgePathPair)
             (map (lambda ([path : Path]) (list (backup-age-in-months path reference-date) path))
                  paths))
         #+end_src
***** dependently typed

      *typing outside of haskell? that's crazy!*

      - support basic refinement and dependent function types ([[https://blog.racket-lang.org/2017/11/adding-refinement-types.html][link]])
      - condition limited to small set of operators ([[https://docs.racket-lang.org/ts-reference/Experimental_Features.html#%28form._%28%28lib._typed-racket%2Fbase-env%2Fbase-types-extra..rkt%29._.Refine%29%29][link]])
        #+begin_src racket
          (: next-age-ge (([age : Nonnegative-Integer] [_ : (Setof Nonnegative-Integer)])
                          . -> . (Refine [next-age : Nonnegative-Integer] (>= next-age age))))
        #+end_src

      - source ([[file:duplicity-get-fulls-to-delete.rkt::251][link]])
         #+begin_src racket
           (: fib : Nonnegative-Integer -> Nonnegative-Integer)
           (define (fib n)
             (cond [(= n 0) 0]
                   [(<= n 2) 1]
                   [else (+ (fib (- n 1))
                            (fib (- n 2)))]))
         #+end_src
***** tests

      *hey, I thought it is typed!*

      - easy testable? no side effects! immutability! ([[file:duplicity-get-fulls-to-delete.rkt::173][link]])
         #+begin_src racket
           (module+ test #| pair with age |#
             (check-equal? (pair-with-age (list valid-path-20200201 valid-path-20200203)
                                          (gg:date 2020 07 01))
                           `((5 ,valid-path-20200201)
                             (4 ,valid-path-20200203))))
         #+end_src
***** coverage

      *even though it is typed?*

      - execute test coverage
         #+begin_src bash :results silent
           raco cover duplicity-get-fulls-to-delete.rkt
         #+end_src

      - view coverage on
          #+begin_src emacs-lisp :results silent
            (browse-url (s-concat "file:///home/" (getenv "USER") "/repo/+1/duplicity-utils/coverage/index.html"))
          #+end_src
***** scriptable

      *no need for bash, you can use a /language/ for scripting*

      - source ([[file:duplicity-get-fulls-to-delete.rkt::1][link]])
         #+begin_src racket :results verbatim
           #! /usr/bin/env racket
           #lang typed/racket #:with-refinements

           (print "hello")
         #+end_src
***** executable

      *producing fat executables is no exclusive privilege of c, c++, go!*

       - standalone executable (23mb)
         #+begin_src bash
           raco exe --gui duplicity-get-fulls-to-delete.rkt
         #+end_src
** postscript
   - see [[https://github.com/gunther-bachmann/duplicity-utils/blob/master/present.org][presentation]] on github
   - [[http://duplicity.nongnu.org/][duplicity]]
   - [[https://github.com/polybar/polybar][polybar]]
   - [[https://nixos.org/][nixos]]
   - [[https://limitcpu.sourceforge.net/][cpulimit]], [[https://www.kernel.org/pub/linux/utils/util-linux/][ionice]], [[https://www.gnu.org/software/coreutils/][nice]]
   - [[https://www.gnu.org/software/emacs/][emacs]] ([[https://orgmode.org/worg/org-contrib/babel/intro.html][org-babel]], [[https://github.com/takaxp/org-tree-slide][org-tree-slide]])
   - [[https://racket-lang.org/][racket]]
* - :noexport:
#+begin_src emacs-lisp
  ;; Local Variables:
  ;; org-tree-slide-header: nil
  ;; org-tree-slide-heading-emphasis: t
  ;; org-tree-slide-modeline-display: 'lighter
  ;; org-tree-slide-presentation-length: 30
  ;; gb/slides-started: nil
  ;; org-tree-slide-content--pos: nil
  ;; End:
#+end_src
