* duplicity-utils

  Tooling around [[http://duplicity.nongnu.org/][duplicity]] to streamline backup creation and lifecycle.


** development

   Project development makes extensive use of [[https://www.gnu.org/software/emacs/][emacs]], [[https://racket-lang.org/][racket]], [[https://nixos.org/nix/][nix]] and [[https://direnv.net/][direnv]].

   Run tests within emacs using [[https://github.com/greghendershott/racket-mode][racket-mode]] via ~C-c C-t~.
   Run all tests from cli via ~raco test .~ in the project root.

   To create a standalone executable, run ~raco exe --gui duplicity-get-fulls-to-delete.rkt~

   For coverage analysis, execute ~raco cover duplicity-get-fulls-to-delete.rkt~ and visit file:coverage/index.html

   Create documentation by executing e.g. ~raco scribble literate-p.rkt~.
** changelog / todos
   - [ ] write properties that are checked before deletion is carried out
   - [ ] implement property based testing for these properties
   - [ ] provide podman based image for a backend that can be queried via rest services
   - [ ] write react redux based frontend against that backend
